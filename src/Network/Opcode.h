#ifndef OPCODE_H_
#define OPCODE_H_

#include "NetworkSession.h"

namespace Network
{
enum eSessionState
{
	STATE_NEVER,
	STATE_EVERYTIME,
	STATE_NOTLOGGED,
	STATE_LOGGING,
	STATE_LOGGED,
	STATE_INGAME
};

enum eOpcode
{
	 OP_KEEPALIVE = 0X0,
	 OP_LOGIN_REQUEST = 0X1,
	 OP_HANDSHAKE = 0X2,
	 OP_CHAT_MESSAGE = 0X3,
	 OP_TIME_UPDATE= 0X4,
	 OP_ENTITY_EQUIPEMENT= 0X5,
	 OP_SPAWN_POSITION = 0X6,
	 OP_USE_ENTITY= 0X7,
	 OP_UPDATE_HEALTH = 0X8,
	 OP_RESPAWN = 0X9,
	 OP_PLAYER = 0XA,
	 OP_PLAYER_POSITION = 0XB,
	 OP_PLAYER_LOOK = 0XC,
	 OP_PLAYER_POSITION_AND_LOOK = 0XD,
	 OP_PLAYER_DIGGING = 0XE,
	 OP_PLAYER_BLOCK_PLACEMENT = 0XF,
	 HELD_ITEM_CHANGE = 0X10,
	 USE_BED = 0X11,
	 ANIMATION = 0X12,
	 ENTITY_ACTION = 0X13,
	 SPAWN_NAMED_ENTITY = 0X14,
	 SPAWN_DROPPED_ITEM = 0X15,
	 COLLECT_ITEM = 0X16,
	 SPAWN_OBJECT_VEHICLE = 0X17,
	 SPAWN_MOB = 0X18,
	 SPAWN_PAINTING = 0X19,
	 SPAWN_EXPERIENCE_ORB = 0X1A,
	 ENTITY_VELOCITY = 0X1C,
	 DESTROY_ENTITY = 0X1D,
	 ENTITY = 0X1E,
	 ENTITY_RELATIVE_MOVE = 0X1F,
	 ENTITY_LOOK = 0X20,
	 ENTITY_LOOK_AND_RELATIVE_MOVE = 0X21,
	 ENTITY_TELEPORT = 0X22,
	 ENTITY_HEAD_LOOK = 0X23,
	 ENTITY_STATUS = 0X26,
	 ATTACH_ENTITY = 0X27,
	 ENTITY_METADATA = 0X28,
	 ENTITY_EFFECT = 0X29,
	 REMOVE_ENTITY_EFFECT = 0X2A,
	 SET_EXPERIENCE = 0X2B,
	 CHUNK_DATA = 0X33,
	 MULTI_BLOCK_CHANGE = 0X34,
	 BLOCK_CHANGE = 0X35,
	 BLOCK_ACTION = 0X36,
	 BLOCK_BREAK_ANIMATION = 0X37,
	 MAP_CHUNK_BULK = 0X38,
	 EXPLOSION = 0X3C,
	 SOUND_OR_PARTICLE_EFFECT = 0X3D,
	 NAMED_SOUND_EFFECT = 0X3E,
	 CHANGE_GAME_STATE = 0X46,
	 GLOBAL_ENTITY = 0X47,
	 OPEN_WINDOW = 0X64,
	 CLOSE_WINDOW = 0X65,
	 CLICK_WINDOW = 0X66,
	 SET_SLOT = 0X67,
	 SET_WINDOW_ITEMS = 0X68,
	 UPDATE_WINDOW_PROPERTY = 0X69,
	 CONFIRM_TRANSACTION = 0X6A,
	 CREATIVE_INVENTORY_ACTION = 0X6B,
	 ENCHANT_ITEM = 0X6C,
	 UPDATE_SIGN = 0X82,
	 ITEM_DATA = 0X83,
	 UPDATE_TILE_ENTITY = 0X84,
	 INCREMENT_STATISTIC = 0XC8,
	 PLAYER_LIST_ITEM = 0XC9,
	 PLAYER_ABILITIES = 0XCA,
	 TAB_COMPLETE = 0XCB,
	 OP_CLIENT_SETTINGS = 0XCC,
	 OP_CLIENT_STATUSES = 0XCD,
	 OP_ENCRYPTION_KEY_RESPONSE = 0XFC,
	 OP_ENCRYPTION_KEY_REQUEST = 0XFD,
	 OP_SERVER_LIST_PING = 0XFE,
	 OP_KICK = 0XFF
};

#define TOTAL_OPCODE_COUNT 256

/// Structure permettant de lié un Opcode a une fonction
struct OpcodeHandler
{
	OpcodeHandler()
	{
		name = "UNK_OPCODE";
		state = STATE_NEVER;
		handler = NULL;
	}
	OpcodeHandler(char const* name,eSessionState state,void (NetworkSession::*handler)())
	{
		this->name = name;
		this->state = state;
		this->handler = handler;
	}
	/// Nom de l'opcode
	char const* name;
	/// Etat de la session requis pour que l'opcode soit réceptionné
	eSessionState state;
	/// Méthode associé a l'opcode
	void (NetworkSession::*handler)() throw (NetworkException);
};

extern OpcodeHandler opcodeTable[TOTAL_OPCODE_COUNT];
void initOpcode();
}
#endif
